package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/nakagami/firebirdsql"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Config struct para carregar a configuração do Firebird a partir de config.json
type Config struct {
	Firebird struct {
		User     string `json:"user"`
		Password string `json:"password"`
		DBName   string `json:"dbname"`
	} `json:"firebird"`
}

// Queries struct para carregar as consultas a partir de queries.json
type Queries struct {
	GetTables           string `json:"GetTables"`
	TOTAL_VENDIDO_DIA   string `json:"TOTAL_VENDIDO_DIA"`
	TICKET_MEDIO_DIA    string `json:"TICKET_MEDIO_DIA"`
	// ... outras consultas ...
}

// Carrega a configuração do Firebird a partir de config.json
func loadConfig() (*Config, error) {
	// Validação do arquivo de configuração
	if _, err := os.Stat("config.json"); os.IsNotExist(err) {
		log.Fatal("Arquivo de configuração não encontrado: config.json")
	}

	// Carregar configuração do JSON
	config, err := loadConfigFromPath("config.json")
	if err != nil {
		log.Fatal("Erro ao carregar a configuração:", err)
	}

	return config, nil
}

// Carrega a configuração do Firebird a partir de um caminho de arquivo
func loadConfigFromPath(filename string) (*Config, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	var config Config
	err = decoder.Decode(&config)
	if err != nil {
		return nil, err
	}

	return &config, nil
}

// Carrega as consultas a partir de queries.json
func loadQueries() (*Queries, error) {
	// Carrega consultas do JSON
	queries, err := loadQueriesFromPath("queries.json")
	if err != nil {
		log.Fatal("Erro ao carregar as consultas:", err)
	}

	return queries, nil
}

// Carrega as consultas a partir de um caminho de arquivo
func loadQueriesFromPath(filename string) (*Queries, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	var queries Queries
	err = decoder.Decode(&queries)
	if err != nil {
		return nil, err
	}

	return &queries, nil
}

func main() {
	// Carrega a configuração e as consultas
	config, err := loadConfig()
	if err != nil {
		log.Fatal("Erro ao carregar a configuração:", err)
	}

	queries, err := loadQueries()
	if err != nil {
		log.Fatal("Erro ao carregar as consultas:", err)
	}

	// Conexão com o Firebird
	firebirdDSN := fmt.Sprintf("user=%s password=%s dbname=%s", config.Firebird.User, config.Firebird.Password, config.Firebird.DBName)
	firebirdDB, err := sql.Open("firebirdsql", firebirdDSN)
	if err != nil {
		log.Fatal("Erro ao conectar ao Firebird:", err)
	}
	defer firebirdDB.Close()

	// Recuperação da lista de tabelas no Firebird
	tables, err := getTables(firebirdDB)
	if err != nil {
		log.Fatal("Erro ao recuperar as tabelas:", err)
	}

	// Conexão com o MongoDB
	mongoClient, err := mongo.Connect(context.Background(), options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		log.Fatal("Erro ao conectar ao MongoDB:", err)
	}
	defer mongoClient.Disconnect(context.Background())

	mongoDB := mongoClient.Database("suporte")

	// Para cada tabela, recupera os dados e os envia para o MongoDB
	for _, table := range tables {
		// Recuperação dos dados da tabela
		data, err := getTableData(firebirdDB, queries, table)
		if err != nil {
			log.Printf("Erro ao recuperar os dados da tabela %s: %v\n", table, err)
			continue
		}

		// Inserção dos dados no MongoDB
		err = insertData(mongoDB, "LOJAS", data)
		if err != nil {
			log.Printf("Erro ao enviar os dados da tabela %s para o MongoDB: %v\n", table, err)
			continue
		}

		fmt.Printf("Dados da tabela %s enviados com sucesso para o MongoDB!\n", table)
	}
}
